<?php
namespace App\Controllers;

use App\Core\Controller;
use App\Middlewares\AuthMiddleware;

/**
 * Agent Controller
 * Handles agent operations for parking management
 */
class AgentController extends Controller
{
    private $parkingSpaceModel;
    private $vehicleModel;
    private $parkingTicketModel;
    
    /**
     * Constructor - initialize models and middleware
     */
    public function __construct()
    {
        // Require agent role for all methods in this controller
        AuthMiddleware::requireAgent();
        
        // Load models
        $this->parkingSpaceModel = $this->model('ParkingSpace');
        $this->vehicleModel = $this->model('Vehicle');
        $this->parkingTicketModel = $this->model('ParkingTicket');
    }
    
    /**
     * Default index method - redirects to dashboard
     *
     * @return void
     */
    public function index()
    {
        // Redirect to agent dashboard
        $this->redirect('agent/dashboard');
    }
    
    /**
     * Manage reservations
     *
     * @return void
     */
    public function reservations()
    {
        // Initialize data array
        $data = [
            'title' => 'Manage Reservations',
            'criteria' => [],
            'reservations' => []
        ];
        
        // Handle search/filter criteria
        if ($_SERVER['REQUEST_METHOD'] === 'GET' && !empty($_GET)) {
            // Filter criteria
            if (!empty($_GET['customer_name'])) {
                $data['criteria']['customer_name'] = trim($_GET['customer_name']);
            }
            
            if (!empty($_GET['status'])) {
                $data['criteria']['status'] = trim($_GET['status']);
            }
            
            if (!empty($_GET['date'])) {
                $data['criteria']['date'] = trim($_GET['date']);
            }
            
            if (!empty($_GET['space_id'])) {
                $data['criteria']['space_id'] = (int)$_GET['space_id'];
            }
            
            // Get filtered reservations
            $reservationModel = $this->model('Reservation');
            $data['reservations'] = $reservationModel->getReservations($data['criteria']);
        } else {
            // Get all active reservations by default
            $reservationModel = $this->model('Reservation');
            $data['reservations'] = $reservationModel->getReservations(['status' => 'active']);
        }
        
        $this->view('agent/reservations', $data);
    }
    
    /**
     * Create a new reservation
     *
     * @return void
     */
    public function createReservation()
    {
        // Initialize data array
        $data = [
            'title' => 'Create New Reservation',
            'formData' => [],
            'errors' => [],
            'spaces' => [],
            'vehicleTypes' => []
        ];
        
        // Load available spaces and vehicle types
        $data['spaces'] = $this->parkingSpaceModel->getAvailableSpaces();
        $vehicleTypeModel = $this->model('VehicleType');
        $data['vehicleTypes'] = $vehicleTypeModel->getAllVehicleTypes();
        
        // Process form submission
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Sanitize POST data
            $_POST = filter_input_array(INPUT_POST, FILTER_SANITIZE_STRING);
            
            // Get form data
            $data['formData'] = [
                'customer_name' => trim($_POST['customer_name']),
                'customer_email' => trim($_POST['customer_email']),
                'customer_phone' => trim($_POST['customer_phone']),
                'space_id' => (int)$_POST['space_id'],
                'vehicle_type_id' => !empty($_POST['vehicle_type_id']) ? (int)$_POST['vehicle_type_id'] : null,
                'license_plate' => !empty($_POST['license_plate']) ? trim($_POST['license_plate']) : null,
                'start_time' => trim($_POST['start_time']),
                'end_time' => trim($_POST['end_time']),
                'notes' => !empty($_POST['notes']) ? trim($_POST['notes']) : null
            ];
            
            // Validate data
            if (empty($data['formData']['customer_name'])) {
                $data['errors']['customer_name'] = 'Customer name is required';
            }
            
            if (empty($data['formData']['space_id'])) {
                $data['errors']['space_id'] = 'Please select a parking space';
            }
            
            if (empty($data['formData']['start_time'])) {
                $data['errors']['start_time'] = 'Start time is required';
            }
            
            if (empty($data['formData']['end_time'])) {
                $data['errors']['end_time'] = 'End time is required';
            }
            
            // Validate times
            $startTime = strtotime($data['formData']['start_time']);
            $endTime = strtotime($data['formData']['end_time']);
            
            if ($startTime >= $endTime) {
                $data['errors']['end_time'] = 'End time must be after start time';
            }
            
            if ($startTime < time()) {
                $data['errors']['start_time'] = 'Start time cannot be in the past';
            }
            
            // If no errors, create reservation
            if (empty($data['errors'])) {
                $reservationModel = $this->model('Reservation');
                
                // Check for time conflicts
                if ($reservationModel->hasTimeConflict($data['formData']['space_id'], $data['formData']['start_time'], $data['formData']['end_time'])) {
                    $data['errors']['time_conflict'] = 'There is a time conflict with another reservation for this space';
                    $this->view('agent/create_reservation', $data);
                    return;
                }
                
                // Create reservation
                $reservationId = $reservationModel->createReservation($data['formData'], $_SESSION['user_id']);
                
                if ($reservationId) {
                    flash('reservation_success', 'Reservation created successfully');
                    $this->redirect('agent/viewReservation/' . $reservationId);
                    return;
                } else {
                    $data['errors']['general'] = 'Failed to create reservation';
                }
            }
        }
        
        $this->view('agent/create_reservation', $data);
    }
    
    /**
     * Agent dashboard
     *
     * @return void
     */
    public function dashboard()
    {
        // Get statistics
        $spaceStats = $this->parkingSpaceModel->getStatistics();
        $ticketStats = $this->parkingTicketModel->getStatistics('day');
        
        // Get active tickets
        $activeTickets = $this->parkingTicketModel->getActiveTickets();
        
        $data = [
            'title' => 'Agent Dashboard',
            'spaceStats' => $spaceStats,
            'ticketStats' => $ticketStats,
            'activeTickets' => $activeTickets
        ];
        
        $this->view('agent/dashboard', $data);
    }
    
    /**
     * Parking map view
     *
     * @return void
     */
    public function parkingMap()
    {
        // Get all parking spaces with their type information
        $spaces = $this->parkingSpaceModel->getAllWithType();
        
        $data = [
            'title' => 'Parking Map',
            'spaces' => $spaces
        ];
        
        $this->view('agent/parking_map', $data);
    }
    
    /**
     * Vehicle entry
     *
     * @return void
     */
    public function vehicleEntry()
    {
        $vehicleTypes = $this->vehicleModel->getVehicleTypes();
        
        $data = [
            'title' => 'Vehicle Entry',
            'vehicleTypes' => $vehicleTypes,
            'errors' => []
        ];
        
        // Process form submission
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Sanitize POST data
            $_POST = filter_input_array(INPUT_POST, FILTER_SANITIZE_STRING);
            
            $licensePlate = trim($_POST['license_plate']);
            $typeId = (int)$_POST['type_id'];
            $ownerName = trim($_POST['owner_name'] ?? '');
            $ownerPhone = trim($_POST['owner_phone'] ?? '');
            
            // Validate license plate
            if (empty($licensePlate)) {
                $data['errors']['license_plate'] = 'Please enter a license plate';
            }
            
            // If no errors, process vehicle entry
            if (empty($data['errors'])) {
                // Check if vehicle exists
                $vehicle = $this->vehicleModel->findByLicensePlate($licensePlate);
                
                if (!$vehicle) {
                    // Create new vehicle
                    $vehicleData = [
                        'license_plate' => $licensePlate,
                        'type_id' => $typeId,
                        'owner_name' => $ownerName,
                        'owner_phone' => $ownerPhone
                    ];
                    
                    $vehicleId = $this->vehicleModel->create($vehicleData);
                    
                    if (!$vehicleId) {
                        die('Error creating vehicle');
                    }
                } else {
                    $vehicleId = $vehicle->id;
                    
                    // Check if vehicle is already parked
                    if ($this->vehicleModel->isParked($vehicleId)) {
                        $data['errors']['license_plate'] = 'This vehicle is already parked';
                        $this->view('agent/vehicle_entry', $data);
                        return;
                    }
                }
                
                // Find available space for vehicle type
                $space = $this->parkingSpaceModel->findAvailableSpaceForVehicleType($typeId);
                
                if (!$space) {
                    $data['errors']['space'] = 'No available parking space for this vehicle type';
                    $this->view('agent/vehicle_entry', $data);
                    return;
                }
                
                // Create parking ticket
                $ticketId = $this->parkingTicketModel->createTicket($vehicleId, $space->id, $_SESSION['user_id']);
                
                if ($ticketId) {
                    flash('ticket_success', 'Vehicle entry recorded successfully');
                    $this->redirect('agent/ticketDetails/' . $ticketId);
                } else {
                    die('Error creating ticket');
                }
            }
        }
        
        $this->view('agent/vehicle_entry', $data);
    }
    
    /**
     * Vehicle exit
     *
     * @return void
     */
    public function vehicleExit()
    {
        $data = [
            'title' => 'Vehicle Exit',
            'errors' => []
        ];
        
        // Process form submission
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Sanitize POST data
            $_POST = filter_input_array(INPUT_POST, FILTER_SANITIZE_STRING);
            
            $licensePlate = trim($_POST['license_plate']);
            
            // Validate license plate
            if (empty($licensePlate)) {
                $data['errors']['license_plate'] = 'Please enter a license plate';
            }
            
            // If no errors, process vehicle exit
            if (empty($data['errors'])) {
                // Check if vehicle exists
                $vehicle = $this->vehicleModel->findByLicensePlate($licensePlate);
                
                if (!$vehicle) {
                    $data['errors']['license_plate'] = 'Vehicle not found';
                    $this->view('agent/vehicle_exit', $data);
                    return;
                }
                
                // Get vehicle with active parking details
                $vehicleWithParking = $this->vehicleModel->getWithActiveParking($vehicle->id);
                
                if (!$vehicleWithParking || !isset($vehicleWithParking->ticket_id)) {
                    $data['errors']['license_plate'] = 'This vehicle is not currently parked';
                    $this->view('agent/vehicle_exit', $data);
                    return;
                }
                
                // Redirect to ticket details for payment processing
                $this->redirect('agent/processExit/' . $vehicleWithParking->ticket_id);
            }
        }
        
        $this->view('agent/vehicle_exit', $data);
    }
    
    /**
     * Process vehicle exit
     *
     * @param int $ticketId Ticket ID
     * @return void
     */
    public function processExit($ticketId)
    {
        // Get ticket details
        $ticket = $this->parkingTicketModel->getTicketDetails($ticketId);
        
        if (!$ticket || $ticket->status !== 'active') {
            flash('ticket_error', 'Invalid ticket or ticket already closed', 'alert alert-danger');
            $this->redirect('agent/dashboard');
            return;
        }
        
        $data = [
            'title' => 'Process Vehicle Exit',
            'ticket' => $ticket,
            'errors' => []
        ];
        
        // Process form submission
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Sanitize POST data
            $_POST = filter_input_array(INPUT_POST, FILTER_SANITIZE_STRING);
            
            $amountPaid = (float)$_POST['amount_paid'];
            
            // Validate amount
            if ($amountPaid <= 0) {
                $data['errors']['amount_paid'] = 'Please enter a valid amount';
            }
            
            // If no errors, close ticket
            if (empty($data['errors'])) {
                if ($this->parkingTicketModel->closeTicket($ticketId, $amountPaid)) {
                    flash('ticket_success', 'Vehicle exit processed successfully');
                    $this->redirect('agent/dashboard');
                } else {
                    die('Something went wrong');
                }
            }
        }
        
        $this->view('agent/process_exit', $data);
    }
    
    /**
     * View ticket details
     *
     * @param int $ticketId Ticket ID
     * @return void
     */
    public function ticketDetails($ticketId)
    {
        // Get ticket details
        $ticket = $this->parkingTicketModel->getTicketDetails($ticketId);
        
        if (!$ticket) {
            flash('ticket_error', 'Ticket not found', 'alert alert-danger');
            $this->redirect('agent/dashboard');
            return;
        }
        
        $data = [
            'title' => 'Ticket Details',
            'ticket' => $ticket
        ];
        
        $this->view('agent/ticket_details', $data);
    }
    
    /**
     * Search tickets
     *
     * @return void
     */
    public function searchTickets()
    {
        // Get search criteria
        $criteria = [];
        $limit = 50;
        $offset = 0;
        
        if ($_SERVER['REQUEST_METHOD'] === 'GET' && !empty($_GET)) {
            if (!empty($_GET['license_plate'])) {
                $criteria['license_plate'] = trim($_GET['license_plate']);
            }
            
            if (!empty($_GET['status'])) {
                $criteria['status'] = trim($_GET['status']);
            }
            
            if (!empty($_GET['date_from'])) {
                $criteria['date_from'] = trim($_GET['date_from']);
            }
            
            if (!empty($_GET['date_to'])) {
                $criteria['date_to'] = trim($_GET['date_to']);
            }
            
            if (!empty($_GET['limit'])) {
                $limit = (int)$_GET['limit'];
            }
            
            if (!empty($_GET['offset'])) {
                $offset = (int)$_GET['offset'];
            }
        }
        
        // Search tickets
        $tickets = $this->parkingTicketModel->searchTickets($criteria, $limit, $offset);
        
        $data = [
            'title' => 'Search Tickets',
            'tickets' => $tickets,
            'criteria' => $criteria,
            'limit' => $limit,
            'offset' => $offset
        ];
        
        $this->view('agent/search_tickets', $data);
    }
}
